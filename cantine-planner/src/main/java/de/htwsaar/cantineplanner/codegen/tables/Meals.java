/*
 * This file is generated by jOOQ.
 */
package de.htwsaar.cantineplanner.codegen.tables;


import de.htwsaar.cantineplanner.codegen.DefaultSchema;
import de.htwsaar.cantineplanner.codegen.Keys;
import de.htwsaar.cantineplanner.codegen.tables.records.MealsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meals extends TableImpl<MealsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>meals</code>
     */
    public static final Meals MEALS = new Meals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MealsRecord> getRecordType() {
        return MealsRecord.class;
    }

    /**
     * The column <code>meals.meal_id</code>.
     */
    public final TableField<MealsRecord, Integer> MEAL_ID = createField(DSL.name("meal_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>meals.Name</code>.
     */
    public final TableField<MealsRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>meals.Price</code>.
     */
    public final TableField<MealsRecord, Float> PRICE = createField(DSL.name("Price"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>meals.calories</code>.
     */
    public final TableField<MealsRecord, Integer> CALORIES = createField(DSL.name("calories"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>meals.allergy</code>.
     */
    public final TableField<MealsRecord, String> ALLERGY = createField(DSL.name("allergy"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>meals.meat</code>.
     */
    public final TableField<MealsRecord, Integer> MEAT = createField(DSL.name("meat"), SQLDataType.INTEGER, this, "");

    private Meals(Name alias, Table<MealsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Meals(Name alias, Table<MealsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>meals</code> table reference
     */
    public Meals(String alias) {
        this(DSL.name(alias), MEALS);
    }

    /**
     * Create an aliased <code>meals</code> table reference
     */
    public Meals(Name alias) {
        this(alias, MEALS);
    }

    /**
     * Create a <code>meals</code> table reference
     */
    public Meals() {
        this(DSL.name("meals"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MealsRecord> getPrimaryKey() {
        return Keys.MEALS__PK_MEALS;
    }

    @Override
    public Meals as(String alias) {
        return new Meals(DSL.name(alias), this);
    }

    @Override
    public Meals as(Name alias) {
        return new Meals(alias, this);
    }

    @Override
    public Meals as(Table<?> alias) {
        return new Meals(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meals rename(String name) {
        return new Meals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meals rename(Name name) {
        return new Meals(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meals rename(Table<?> name) {
        return new Meals(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Meals where(Condition condition) {
        return new Meals(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Meals where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Meals where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Meals where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Meals where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Meals where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Meals where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Meals where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Meals whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Meals whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
